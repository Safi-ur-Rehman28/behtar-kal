import React, { useEffect, useState } from 'react';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';

export default function Data() {
  const [students, setStudents] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [editStudent, setEditStudent] = useState(null); // State to store the student being edited
  const [updatedData, setUpdatedData] = useState({}); // State to store the updated data

  useEffect(() => {
    fetchStudents();
  }, []);

  const fetchStudents = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch('/api/students');
      if (!response.ok) {
        throw new Error('Failed to fetch students');
      }
      const data = await response.json();
      // Dummy donation amounts
      const updatedStudents = data.data.map(student => ({
        ...student,
        donationAmount: Math.floor(Math.random() * 1000) + 500
      }));
      setStudents(updatedStudents);
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  const deleteStudent = async (id) => {
    try {
      const response = await fetch(`/api/students/${id}`, {
        method: 'DELETE'
      });
      if (!response.ok) {
        throw new Error('Failed to delete student');
      }
      fetchStudents();
    } catch (error) {
      setError(error.message);
    }
  };

  const generatePDF = (student) => {
    const doc = new jsPDF();
    
    // Define function to add border to each page
    const addBorderToPage = () => {
      const pageCount = doc.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.rect(5, 5, doc.internal.pageSize.width - 10, doc.internal.pageSize.height - 10, 'S');
      }
    };
    
    // Header
    doc.setFillColor(255, 255, 255); // White color for header background
    doc.rect(0, 0, doc.internal.pageSize.width, 20, 'F'); // Header background rectangle
    doc.setTextColor(0, 0, 255); // Blue color for header text
    doc.setFontSize(18);
    doc.text('BEHTAR KAL', doc.internal.pageSize.width / 2, 12, { align: 'center' }); // Centered header text
    
    // Footer
    doc.setFillColor(255, 255, 255); // White color for footer background
    doc.rect(0, doc.internal.pageSize.height - 20, doc.internal.pageSize.width, 20, 'F'); // Footer background rectangle
    doc.setTextColor(0, 0, 0); // Black color for footer text
    doc.setFontSize(10);
    doc.text('Generated by Your App', doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 8, { align: 'center' }); // Centered footer text
  
    // Content
    doc.setTextColor(0, 0, 0); // Black color for content text
    doc.setFontSize(12);
    doc.text(`Student Name: ${student.username}`, 10, 40);
    doc.text(`Email: ${student.email}`, 10, 50);
    doc.text(`Location: ${student.location}`, 10, 60);
    doc.text(`Contact: ${student.contact}`, 10, 70);
    doc.text(`Unique ID: ${student.uniqueId}`, 10, 80);
    doc.text(`Description: ${student.description}`, 10, 90);
    doc.text(`Financial Expenses: Rs${student.financialExpenses}`, 10, 100);
    doc.text(`Scholarship Requested: ${student.scholarshipRequested ? 'Yes' : 'No'}`, 10, 110);
    doc.text(`School: ${student.school}`, 10, 120);
    doc.text(`Number of Items Availed: ${student.numItemsAvailed}`, 10, 130);
    doc.text(`Donation Amount: Rs${student.donationAmount}`, 10, 140);
  
    // Call function to add border to each page
    addBorderToPage();
  
    // Save the PDF
    doc.save(`${student.username}_report.pdf`);
  };

  const updateStudent = async () => {
    try {
      const response = await fetch(`/api/students/${editStudent._id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(updatedData)
      });
      if (!response.ok) {
        throw new Error('Failed to update student');
      }
      fetchStudents();
      setEditStudent(null); // Reset edit state after update
    } catch (error) {
      setError(error.message);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setUpdatedData({ ...updatedData, [name]: value });
  };

  if (loading) {
    return <div className="text-center mt-5">Loading...</div>;
  }

  if (error) {
    return <div className="text-center mt-5 text-red-500">Error: {error}</div>;
  }

  return (
    <div className="max-w-6xl mx-auto mt-10 p-4">
      <h1 className="text-4xl font-bold text-center mb-10 text-gradient bg-gradient-to-r from-blue-500 to-teal-400 text-transparent bg-clip-text">
        Student Financial Reporting
      </h1>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {students.map(student => (
          <div key={student._id} className="bg-white p-6 rounded-lg shadow-lg transition-transform transform hover:scale-105">
            <h2 className="text-2xl font-bold mb-4 text-gradient bg-gradient-to-r from-green-500 to-blue-500 text-transparent bg-clip-text">
              {student.username}
            </h2>
            <div className="flex items-center mb-2">
              <i className="fas fa-envelope mr-2 text-blue-400"></i>
              <p className="font-semibold">{student.email}</p>
            </div>
            <div className="flex items-center mb-2">
              <i className="fas fa-map-marker-alt mr-2 text-red-400"></i>
              <p className="font-semibold">{student.location}</p>
            </div>
            <div className="flex items-center mb-2">
              <i className="fas fa-phone mr-2 text-green-400"></i>
              <p className="font-semibold">{student.contact}</p>
            </div>
            <div className="flex items-center mb-2">
              <i className="fas fa-id-badge mr-2 text-purple-400"></i>
              <p className="font-semibold">{student.uniqueId}</p>
            </div>
            
            <div className="mb-4">
              <h3 className="text-xl font-semibold mt-4 mb-2">Avail Items:</h3>
              <ul className="list-disc list-inside">
              <li className="mb-4">{student.description}</li>
              </ul>
            </div>
            <div className="mb-4">
              <h3 className="text-xl font-semibold">Financial Reporting:</h3>
              <p><span className="font-semibold">Financial Expenses:</span> Rs{student.financialExpenses}</p>
              <p><span className="font-semibold">Scholarship Requested:</span> {student.scholarshipRequested ? 'Yes' : 'No'}</p>
              <p><span className="font-semibold">School:</span> {student.school}</p>
              <p><span className="font-semibold">Number of Items Availed:</span> {student.numItemsAvailed}</p>
              <p><span className="font-semibold">Donation Amount:</span> Rs{student.donationAmount}</p>
            </div>
            <div className="mt-4 flex justify-between space-x-2">
              <button onClick={() => deleteStudent(student._id)} className="bg-red-500 text-white py-1 px-3 rounded hover:bg-red-700 transition">
                Delete
              </button>
              <button onClick={() => generatePDF(student)} className="bg-green-500 text-white py-1 px-3 rounded hover:bg-green-700 transition">
                Generate PDF
              </button>
              <button onClick={() => setEditStudent(student)} className="bg-blue-500 text-white py-1 px-3 rounded hover:bg-blue-700 transition">
                Edit
              </button>
            </div>
          </div>
        ))}
      </div>

      {/* Edit Modal or Form */}
      {editStudent && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
          <div className="bg-white p-4 rounded-lg">
            <h2 className="text-xl font-semibold mb-4">Edit Student</h2>
            <div style={{ maxHeight: '80vh', overflowY: 'auto' }}>
              <form onSubmit={(e) => {
                e.preventDefault();
                updateStudent();
              }}>
                <div className="mb-4">
                  <label htmlFor="username" className="block font-semibold">Username:</label>
                  <input type="text" id="username" name="username" value={updatedData.username || editStudent.username} onChange={handleInputChange} className="border border-gray-300 rounded-md px-2 py-1 w-full" />
                </div>
                <div className="mb-4">
                  <label htmlFor="email" className="block font-semibold">Email:</label>
                  <input type="email" id="email" name="email" value={updatedData.email || editStudent.email} onChange={handleInputChange} className="border border-gray-300 rounded-md px-2 py-1 w-full" />
                </div>
                <div className="mb-4">
                  <label htmlFor="location" className="block font-semibold">Location:</label>
                  <input type="text" id="location" name="location" value={updatedData.location || editStudent.location} onChange={handleInputChange} className="border border-gray-300 rounded-md px-2 py-1 w-full" />
                </div>
                <div className="mb-4">
                  <label htmlFor="contact" className="block font-semibold">Contact:</label>
                  <input type="tel" id="contact" name="contact" value={updatedData.contact || editStudent.contact} onChange={handleInputChange} className="border border-gray-300 rounded-md px-2 py-1 w-full" />
                </div>
                <div className="mb-4">
                  <label htmlFor="uniqueId" className="block font-semibold">Unique ID:</label>
                  <input type="text" id="uniqueId" name="uniqueId" value={updatedData.uniqueId || editStudent.uniqueId} onChange={handleInputChange} className="border border-gray-300 rounded-md px-2 py-1 w-full" />
                </div>
                <div className="mb-4">
                  <label htmlFor="description" className="block font-semibold">Description:</label>
                  <textarea id="description" name="description" value={updatedData.description || editStudent.description} onChange={handleInputChange} className="border border-gray-300 rounded-md px-2 py-1 w-full h-16 resize-none"></textarea>
                </div>
                <div className="mb-4">
                  <label htmlFor="school" className="block font-semibold">School:</label>
                  <input type="text" id="school" name="school" value={updatedData.school || editStudent.school} onChange={handleInputChange} className="border border-gray-300 rounded-md px-2 py-1 w-full" />
                </div>
                <div className="mb-4">
                  <label htmlFor="numItemsAvailed" className="block font-semibold">Number of Items Availed:</label>
                  <input type="number" id="numItemsAvailed" name="numItemsAvailed" value={updatedData.numItemsAvailed || editStudent.numItemsAvailed} onChange={handleInputChange} className="border border-gray-300 rounded-md px-2 py-1 w-full" />
                </div>
                <div className="mb-4">
                  <label htmlFor="scholarshipRequested" className="block font-semibold">Scholarship Requested:</label>
                  <select id="scholarshipRequested" name="scholarshipRequested" value={updatedData.scholarshipRequested || editStudent.scholarshipRequested} onChange={handleInputChange} className="border border-gray-300 rounded-md px-2 py-1 w-full">
                    <option value="">Select Option</option>
                    <option value="true">Yes</option>
                    <option value="false">No</option>
                  </select>
                </div>
                <div className="mb-4">
                  <label htmlFor="financialExpenses" className="block font-semibold">Financial Expenses:</label>
                  <input type="number" id="financialExpenses" name="financialExpenses" value={updatedData.financialExpenses || editStudent.financialExpenses} onChange={handleInputChange} className="border border-gray-300 rounded-md px-2 py-1 w-full" />
                </div>
                <div className="mb-4">
                  <label htmlFor="donationAmount" className="block font-semibold">Donation Amount:</label>
                  <input type="number" id="donationAmount" name="donationAmount" value={updatedData.donationAmount || editStudent.donationAmount} onChange={handleInputChange} className="border border-gray-300 rounded-md px-2 py-1 w-full" />
                </div>
                <div className="mt-4 flex justify-end">
                  <button type="submit" className="bg-blue-500 text-white py-1 px-3 rounded hover:bg-blue-700 transition">Save</button>
                  <button onClick={() => setEditStudent(null)} className="bg-gray-500 text-white py-1 px-3 rounded hover:bg-gray-700 transition ml-2">Cancel</button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
